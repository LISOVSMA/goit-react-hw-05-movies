{"version":3,"file":"static/js/258.838511cf.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","components/SearchMovie/SearchMovie.styled.jsx","components/SearchMovie/SearchMovie.jsx","pages/Movies.jsx","services/moviesApi.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  font-size: 20px;\n  font-weight: 600;\n  list-style-type: square;\n`;\n\nexport const Item = styled.li`\n  padding: 6px 12px;\n  position: relative;\n`;\n\nexport const LinkDetails = styled(Link)`\n  color: #0f1926;\n  text-decoration: none;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    color: #cd1839;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { List, Item, LinkDetails } from './MovieList.styled';\n\nconst MovieList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {films.map(movie => (\n        <Item key={movie.id}>\n          <LinkDetails\n            to={`/movies/${movie.id}`}\n            state={{ from: location }}\n            cover={movie.poster_path}\n          >\n            {movie.title}\n          </LinkDetails>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nMovieList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default MovieList;\n","import styled from '@emotion/styled';\nimport { FcSearch } from 'react-icons/fc';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  gap: 22px;\n  padding: 0 16px;\n  flex-wrap: wrap;\n\n  input {\n    font-size: 16px;\n    padding: 8px 36px 8px 12px;\n    width: 260px;\n    background-color: transparent;\n    border: none;\n    border-bottom: 2px solid #0f1926;\n    outline: none;\n  }\n`;\n\nexport const Icon = styled(FcSearch)`\n  width: 28px;\n  height: 28px;\n  position: relative;\n  right: 56px;\n  z-index: 1;\n  opacity: 0.6;\n`;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { DebounceInput } from 'react-debounce-input';\nimport { Form, Icon } from './SearchMovie.styled';\n\nexport const SearchMovie = ({ onChange, errorMessage }) => {\n  const [query, setQuery] = useState('');\n\n  const changeQuery = e => {\n    setQuery(e.target.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!query) return errorMessage();\n    onChange(query);\n    setQuery('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <h3>Movie Search</h3>\n      <DebounceInput\n        type=\"text\"\n        name=\"query\"\n        debounceTimeout={500}\n        value={query}\n        onChange={changeQuery}\n        placeholder=\"enter movie name\"\n      />\n      <Icon />\n    </Form>\n  );\n};\n\nSearchMovie.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  errorMessage: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\nimport 'react-loading-skeleton/dist/skeleton.css';\nimport { getSearchMovies } from 'services/moviesApi';\nimport { SearchMovie } from 'components/SearchMovie/SearchMovie';\nimport MovieList from 'components/MovieList/MovieList';\n\nconst Movies = () => {\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') || '';\n  const [loading, setLoading] = useState(false);\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' && { query };\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    const search = async () => {\n      try {\n        setLoading(true);\n        const movies = await getSearchMovies(movieName);\n        setSearchResults(movies);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    search();\n  }, [movieName]);\n\n  return (\n    <div>\n      <SkeletonTheme baseColor=\"#0f1926\" highlightColor=\"#cd1839\">\n        <SearchMovie value={movieName} onChange={updateQueryString} />\n        {loading ? (\n          <Skeleton\n            count={15}\n            style={{ height: 30, width: 300, marginTop: 15 }}\n          />\n        ) : searchResults.length === 0 && movieName ? (\n          <h2>Nothing found</h2>\n        ) : (\n          <MovieList films={searchResults} />\n        )}\n      </SkeletonTheme>\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'fab94b5e93d9dda4c924bebbb4c2a968';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const getSearchMovies = async searchQuery => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${searchQuery}`\n  );\n  return response.data.results;\n};\n\nexport const getDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getCredits = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["List","styled","Item","LinkDetails","Link","films","location","useLocation","map","movie","to","id","state","from","cover","poster_path","title","Form","Icon","FcSearch","SearchMovie","onChange","errorMessage","useState","query","setQuery","onSubmit","e","preventDefault","DebounceInput","type","name","debounceTimeout","value","target","toLowerCase","placeholder","searchResults","setSearchResults","useSearchParams","searchParams","setSearchParams","movieName","get","loading","setLoading","useEffect","search","getSearchMovies","movies","console","error","baseColor","highlightColor","count","style","height","width","marginTop","length","MovieList","axios","API_KEY","getTrendingMovies","response","data","results","searchQuery","getDetails","movieId","getCredits","cast","getReviews"],"sourceRoot":""}